const fs = require('fs');
const path = require('path');
const gulp = require('gulp');
const plugins = require('gulp-load-plugins')();
const through = require('through2');
const argv = require('yargs').argv;
const spritesmith = require('gulp.spritesmith');
const merge = require('merge-stream');

// =====================================
// CONFIG
// =====================================
const config = {
  inputDir: path.resolve(argv.in || argv.i || 'assets'),
  outputDir: path.resolve(argv.out || argv.o || 'public/assets'),
  pubicPath: argv.publicPath || argv.p || '/assets',
  getAssetPathFile: path.resolve(argv.getAssetPathFile || argv.a || 'app/utils/assetPath.js')
};

// =====================================
// UTILS
// =====================================
const isProductionEnvironment = (process.env.NODE_ENV || 'development') === 'production';
const assetPath = {};

function saveAssetPath(basePath) {
  return through.obj((file, enc, cb) => {
    if (!file.isDirectory()) {
      const fileNameWithRevision = file.history[file.history.length - 1].replace(
        basePath || file.base,
        ''
      );

      let fileName = fileNameWithRevision;
      if (file.history.length > 1) {
        fileName = file.history[file.history.length - 2].replace(basePath || file.base, '');
      }

      assetPath[fileName] = path.join(config.pubicPath, fileNameWithRevision);
    }

    cb(null, file);
  });
}

const revisionTransformer = (file, hash) => {
  const extension = path.extname(file.path);
  return hash + extension;
};

// =====================================
// TASKS
// =====================================
/**
 * Clean all assets
 */
gulp.task('clean', () => {
  return gulp.src(config.outputDir).pipe(plugins.rimraf());
});

/**
 * Build Images
 */
gulp.task('build-image', () => {
  return gulp
    .src(`${config.inputDir}/img/**`)
    .pipe(
      plugins.if(isProductionEnvironment, plugins.revision({ transformer: revisionTransformer }))
    )
    .pipe(saveAssetPath(`${config.inputDir}/`))
    .pipe(gulp.dest(`${config.outputDir}/img`));
});

/**
 * Build Fonts
 */
gulp.task('build-font', () => {
  return gulp
    .src(`${config.inputDir}/fonts/**`)
    .pipe(
      plugins.if(isProductionEnvironment, plugins.revision({ transformer: revisionTransformer }))
    )
    .pipe(saveAssetPath(`${config.inputDir}/`))
    .pipe(gulp.dest(`${config.outputDir}/fonts`));
});

/**
 * Build CSS
 */
gulp.task('build-css', () => {
  return gulp
    .src(`${config.inputDir}/css/_main/*`)
    .pipe(plugins.stylus())
    .pipe(plugins.autoprefixer())
    .pipe(
      through.obj((file, enc, cb) => {
        file.history.push(file.history[file.history.length - 1]);
        cb(null, file);
      })
    )
    .pipe(
      plugins.if(isProductionEnvironment, plugins.modifyCssUrls({ modify: url => assetPath[url] }))
    )
    .pipe(plugins.if(!isProductionEnvironment, plugins.sourcemaps.init()))
    .pipe(plugins.if(isProductionEnvironment, plugins.cleanCss({ level: 2 })))
    .pipe(
      plugins.if(isProductionEnvironment, plugins.revision({ transformer: revisionTransformer }))
    )
    .pipe(saveAssetPath())
    .pipe(plugins.if(!isProductionEnvironment, plugins.sourcemaps.write('.')))
    .pipe(gulp.dest(config.outputDir));
});

/**
 * Build JS
 */
gulp.task('build-js', () => {
  return (
    gulp
      .src([
        // `${config.inputDir}/js/vendors/jquery.min.js`, // concat jQuery first
        `${config.inputDir}/js/_main/*`
      ])
      // .pipe(plugins.concat('main.js'))
      .pipe(plugins.include())
      .pipe(
        through.obj((file, enc, cb) => {
          file.history.push(file.history[file.history.length - 1]);
          cb(null, file);
        })
      )
      .pipe(plugins.if(!isProductionEnvironment, plugins.sourcemaps.init()))
      .pipe(plugins.babel({ presets: ['es2015', 'es2016', 'es2017', 'stage-0'] }))
      .pipe(plugins.if(isProductionEnvironment, plugins.uglify()))
      .pipe(
        plugins.if(isProductionEnvironment, plugins.revision({ transformer: revisionTransformer }))
      )
      .pipe(saveAssetPath())
      .pipe(plugins.if(!isProductionEnvironment, plugins.sourcemaps.write('.')))
      .pipe(gulp.dest(config.outputDir))
  );
});

/**
 * Generate getAssetPathFile
 */
gulp.task('build-getAssetPathFile', done => {
  let assetPathString = '';
  if (Object.keys(assetPath).length > 0) {
    assetPathString = JSON.stringify(assetPath, null, 4).replace(/"/g, "'");
  }

  const fileContent = `/**
* WARNING: Do NOT modify this code.
* The content of this file is generated by Gulp build process.
*
* This method use to get specific asset file name with its revision
*/
module.exports = function (file) {
  const assetPath = {${assetPathString.substring(1, assetPathString.length - 2)}
  }
  return assetPath[file] || ''
}
`;

  fs.writeFile(config.getAssetPathFile, fileContent, err => {
    done();
  });
});

/**
 * Build all assets
 */
gulp.task(
  'build',
  plugins.sequence(
    ['build-image', 'build-font'],
    ['build-css', 'build-js'],
    'build-getAssetPathFile'
  )
);

/**
 * Generate CSS Sprites
 */
gulp.task('clean-sprite', () => {
  return gulp.src(`${config.inputDir}/img/css/sprites/_sprites*`).pipe(plugins.rimraf());
});

gulp.task('build-sprite', () => {
  const spriteFolder = 'img/css/sprites';
  const spriteData = gulp.src(`${config.inputDir}/${spriteFolder}/*.{png,jpg}`).pipe(
    spritesmith({
      retinaSrcFilter: `${config.inputDir}/${spriteFolder}/*@2x.{png,jpg}`,
      retinaImgName: `${spriteFolder}/_sprites@2x.png`,
      imgName: `${spriteFolder}/_sprites.png`,
      cssName: 'sprites.styl'
    })
  );

  return merge(
    spriteData.img.pipe(gulp.dest(`${config.inputDir}/`)),
    spriteData.css.pipe(gulp.dest(`${config.inputDir}/css/utils/`))
  );
});

gulp.task('sprite', plugins.sequence('clean-sprite', 'build-sprite'));

/**
 * Optimize Images
 */
gulp.task('imagemin', () => {
  return gulp
    .src(`${config.inputDir}/img/**`)
    .pipe(plugins.imagemin())
    .pipe(gulp.dest(`${config.inputDir}/img`));
});

/**
 * Development mode
 */
gulp.task('dev', () => {
  plugins.nodemon({
    watch: ['app/', 'assets/', 'config/'],
    ignore: ['*.log', 'dump.*', config.getAssetPathFile],
    ext: 'js css less scss sass styl json yml jpg png gif ttf eot svg woff woff2',
    exec: 'gulp build && babel-node index.js'
  });
});
